This is Lab 5, the first part of a two-part set of lab work. Together Labs 5 and 6 will be submitted when both are complete.

When we program we often want to keep track of sets of things. For example, we might want to keep track of free seats in a cinema, or
free spaces in a car park. Tracking sets of items becomes much easier if each item is identified by a unique identifier "key".

The problem becomes even simpler if the "keys" have values in th range zero (or one) to number of items. This is common in many practical
situations. For example, the ASCII table gives each character a uniqu number from zero to 255. Houses are commonly numbered 1 to the number
of houses on a street. The same is true of seats on a rollercoaster, or junctions on a motorway.

An abstract data type (ADT) is a set of type declarations and functions. We often put an abstract data type in its own separate
files. In the following files, the bitset abstract data type is in the files bitset.h and bitset.c. The bitset.h file contains
all the necessary declarations for another C file to use the bitset. The bitset.c file contains the code to implement each
of the functions declared in bitset.h. You can find versions of these files in the file bloom-filter.zip which is attached to this assignment in Blackboard.

****
To compile your program you can write:
gcc -o filter main.c bitset.c bloom.c

How do I create a set?
    Option 1 - Use an Array
        Create bitset: create an array of size size
        Lookup Membership: search array for element
        Add: if not_member, then add
        Remove: if is_member, then remove;
        Union: 
****



****

bits is a uint64_t array where if the n'th bit is a 1 that means that element is in the set, so in this case the program is reading the file he gave and for each char it sets the nth position in the array corresponding to that chars place in the ascii table
size_in_words is how many uint64_t variables are needed in the array to hold the maximum number of elements, universe_size
so e.g. universe_size = 100, size_in_words = 2

****

****
expected output of the first test

10 32 46 79 97 100 101 103 104 105 107 108 110 111 112 116
****

****   
How do i access the elements?


****

****
Test Cases:

cardinality, create, remove:
1: ar meisce cha deim nios mo
2: braon leanna go dteo ni bhlaisfidh me

intersect, union:
1: ar meisce cha deim nios mo
braon leanna go dteo ni bhlaisfidh me

2:The gods themselves do tremble
The glorified bricklayer picks up a spare


****
How to interpret cryptic output?

On line 23 I added printf("%c ", i); to convert the int to an ASCII character. You can check if it is correct by checking if each letter in the input is there

****

Please complete each of the functions within the file bitset.c. The functions are:
// create a new, empty bit vector set with a universe of 'size' items
struct bitset * bitset_new(int size);

// get the size of the universe of items that could be stored in the set
int bitset_size(struct bitset * this);

// get the number of items that are stored in the set
int bitset_cardinality(struct bitset * this);

// check to see if an item is in the set
int bitset_lookup(struct bitset * this, int item);

// add an item, with number 'item' to the set; this function has no effect if the item is already in the set
void bitset_add(struct bitset * this, int item);

// remove an item with number 'item' from the set; this function has no effect if item is not in the set
void bitset_remove(struct bitset * this, int item);

// place the union of src1 and src2 into dest; all of src1, src2, and dest must have the same size universe
void bitset_union(struct bitset * dest, struct bitset * src1, struct bitset * src2);

// place the intersection of src1 and src2 into dest; all of src1, src2, and dest must have the same size universe
void bitset_intersect(struct bitset * dest, struct bitset * src1, struct bitset * src2);

To get started, you first need to write code to create your bitset, insert into the bitset, and test for membership of the bitset. Without these three basic
pieces of functionality, none of the tests will work. Once you have these three routines complere, you can write the following to test your program:

./filter bitset_create test_input.txt

You can also test that routines for the following also work, once you have written code for them:

./filter bitset_union test_input.txt
./filter bitset_intersect test_input.txt
./filter bitset_remove test_input.txt

Note: There is a slightly strange aspect of C where if you write an integer constant, such as 1, it is assumed to have type "int".
To write an integer constant 1 that is compatible with "uint64_t", you should write "1ULL" instead of "1".

Please note also that when you print a 64-bit number you need to use %lld in your printf string. So you would write:
uint64_t num = 1ULL << 50;
fprintf(stderr, "%lld", num);
